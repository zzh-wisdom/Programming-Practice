#coding=utf8

import os, sys, time, socket, subprocess

def gen_git_status():
    output = subprocess.check_output(["git status -s ."], shell = True).strip().split('\n')
    git_status = ''
    for line in output:
        seg = line.strip().split(' ')
        if seg[0] == 'M' or seg[0] == 'A':
            git_status += line
            git_status += ';'
    return git_status

def main():
    #定位目录
    THIS_SCRIPT_NAME_SUFFIX = "/gen_version.py"
    this_script_name = os.path.realpath(sys.argv[0])
    assert this_script_name.endswith(THIS_SCRIPT_NAME_SUFFIX)
    version_dir = this_script_name[: -len(THIS_SCRIPT_NAME_SUFFIX)]

    git_commit = subprocess.check_output(["git rev-parse HEAD"], shell = True).strip()
    git_branch = subprocess.check_output(["git rev-parse --abbrev-ref HEAD"], shell = True).strip()
    git_status = gen_git_status()
    
    build_ts = time.strftime("%Y-%m-%d %H:%M:%S")
    build_name = os.getenv('USER')
    host_name = socket.gethostname()

    file_name = "%s/src/version.auto_gen.h" % version_dir
    with open(file_name, "w") as f:
        print >> f, '/* This file was generated by gen_version.py */'
        print >> f, '#pragma once'
        print >> f, 'namespace util {'
        print >> f, 'namespace version {'
        for const_name, str_value in {
            "kGitCommit":       git_commit,
            "kGitBranch":       git_branch,
            "kGitStatus":       git_status,
            "kBuildTime":       build_ts,
            "kBuildUser":       build_name,
            "kBuildHost":       host_name,
        }.iteritems():
            print >> f, 'static const char *const %s = "%s";' % (const_name, str_value)
        print >> f, '}'
        print >> f, '}'

if __name__ == "__main__":
    main()
